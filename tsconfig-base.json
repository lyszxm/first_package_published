{
  "compilerOptions": {
    "composite": true,
    "incremental": true,
    // 这几项配置与Typescript的Project References，tsc的--build模式有关，
    // 具体你可以查阅typescript文档，包括但不限于：
    // https://www.typescriptlang.org/tsconfig#composite
    // https://www.typescriptlang.org/tsconfig#incremental
    // https://www.typescriptlang.org/docs/handbook/project-references.html

    "declaration": true,
    // 将这两项配置项更新为false
    "declarationMap": false,
    "emitDeclarationOnly": false,
    "noEmitOnError": true,
    "skipLibCheck": true,
    // 这几项配置（当然还有其他相关配置）与生成js文件、d.ts文件，sourcemap文件有关，
    // 具体你可以查阅typescript文档，包括但不限于：
    // https://www.typescriptlang.org/tsconfig#declaration
    // https://www.typescriptlang.org/tsconfig#emitDeclarationOnly
    // https://www.typescriptlang.org/tsconfig#noEmitOnError

    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    // 这几项配置与CommonJS和ESModule之间的互操作性有关，
    // 具体你可以查阅typescript文档，包括但不限于：
    // https://www.typescriptlang.org/tsconfig#esModuleInterop
    // 我们也将会在后续的视频中演示依赖于此类配置的pkg，因此这里就不展开了

    "resolveJsonModule": true,
    "strict": true,
    //  这几项配置的作用比较显而易见，具体可查阅文档：
    // https://www.typescriptlang.org/tsconfig#resolveJsonModule
    // https://www.typescriptlang.org/tsconfig#strict

    // 新增这几项配置项
    //
    // 其中 target、lib、module和moduleResolution配置项的值的设置参考于
    // https://github.com/tsconfig/bases/blob/main/bases/node16.json
    // 我当前默认的nodejs版本还是nodejs16系列
    // 但根据一些项目的不同诉求，我也有在使用nodejs20系列
    // 所以此处的参考配置大家可以根据自己的情况来确定
    // 来源于此仓库https://github.com/tsconfig/bases
    //
    // rootDir 和 outDir 则是我们之前已经使用过的配置项。
    "target": "es2015",
    // "lib": ["es2021"], // 我们不显式指定lib，而是让lib根据target自适应，指定lib可能会导致缺少一些ts类型文件
    "rootDir": "./src"
  },
  "include": ["src/**/*.ts"]
}
